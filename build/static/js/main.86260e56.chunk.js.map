{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","enableWebcam","setState","webcamEnabled","setRef","webcam","capture","imageSrc","getScreenshot","imageData","state","facingMode","videoConstraints","width","height","this","className","style","padding","background","color","audio","ref","screenshotFormat","mirrored","type","onClick","src","alt","position","top","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPA2FeA,G,wDAxEd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAfPC,aAAe,kBAAM,EAAKC,SAAS,CAAEC,eAAe,KAcjC,EAXnBC,OAAS,SAACC,GACT,EAAKA,OAASA,GAUI,EAPnBC,QAAU,WACL,IAAMC,EAAW,EAAKF,OAAOG,gBAChC,EAAKN,SAAS,CACbO,UAAWF,KAMb,EAAKG,MAAQ,CACZP,eAAe,EACfQ,WAAY,OACZF,UAAW,MALM,E,qDAUT,IAAD,OACFG,EAAmB,CACxBC,MAAO,KACPC,OAAQ,IACRH,WAAYI,KAAKL,MAAMC,YAEvB,OACE,yBAAKK,UAAU,MAAMC,MAAO,CAACC,QAAS,GAAIC,WAAY,wFAAyFN,MAAO,QAASC,OAAQ,UACxK,yBAAKE,UAAU,+BACd,yBAAKA,UAAU,QAAQC,MAAO,CAAGG,MAAO,UAAxC,UACA,yBAAKJ,UAAU,iBACf,sGACA,6BACKD,KAAKL,MAAMP,cACd,6BACC,kBAAC,IAAD,CACCkB,OAAO,EACHP,OAAQ,IACRQ,IAAKP,KAAKX,OACVmB,iBAAiB,aACjBV,MAAO,KACXW,SAAS,OACTZ,iBAAkBA,IAElB,4BAAQI,UAAU,0DAA0DS,KAAK,SAAQC,QAAS,iBAA+B,SAA1B,EAAKhB,MAAMC,WAAwB,EAAKT,SAAS,CAAES,WAAY,gBAAkB,EAAKT,SAAS,CAACS,WAAY,WAAnN,iBAGD,6BACA,6BACE,4BAAQK,UAAU,uDAAuDS,KAAK,SAASC,QAASX,KAAKT,SAArG,sBAGAS,KAAKL,MAAMD,UACX,6BACC,2BAAG,yBAAKkB,IAAKZ,KAAKL,MAAMD,UAAWmB,IAAI,OAGtC,MAIL,4BAAQZ,UAAU,qCAAqCS,KAAK,SAASC,QAASX,KAAKd,cAAnF,mBAMH,4BAAQe,UAAU,YAAYC,MAAO,CAACY,SAAU,WAAYC,IAAK,SAChE,yBAAKd,UAAU,4BAA4BC,MAAO,CAACG,MAAO,UAA1D,aACU,uBAAGJ,UAAU,cAAcC,MAAO,CAACG,MAAO,sBADpD,MACgF,uBAAGJ,UAAU,eAAeC,MAAO,CAACG,MAAO,UAD3H,cAEA,yBAAKJ,UAAU,8BACd,uBAAGe,KAAK,oBACR,yBAAKJ,IAAI,qDAAqDC,IAAI,kBAAkBf,MAAM,MAAMC,OAAO,gB,GA7E3FkB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.86260e56.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Webcam from 'react-webcam';\nimport './App.css';\n\nclass App extends Component {\n\tenableWebcam = () => this.setState({ webcamEnabled: true });\n\n\n\tsetRef = (webcam) => {\n\t\tthis.webcam = webcam;\n\t}\n\n\tcapture = () => {\n      const imageSrc = this.webcam.getScreenshot();\n\t\t\tthis.setState({\n\t\t\t\timageData: imageSrc\n\t\t\t})\n    }\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\twebcamEnabled: false,\n\t\t\tfacingMode: \"user\",\n\t\t\timageData: null\n\t\t};\n\t}\n\n\n\trender() {\n\t\tconst videoConstraints = {\n\t\t\twidth: 1280,\n\t\t\theight: 720,\n\t\t\tfacingMode: this.state.facingMode\n\t\t}\n\t  return (\n\t    <div className=\"App\" style={{padding: 10, background: 'linear-gradient(160deg, rgb(15, 32, 39, 1), rgb(32, 58, 67, 1), rgba(44, 83, 100, 1))', width: '100vw', height: '100vh'}}>\n\t\t\t\t<div className=\"container has-text-centered\">\n\t\t\t\t\t<div className=\"title\" style={{  color: 'white'}}>WebCam</div>\n\t\t\t\t\t<div className=\"container box\">\n\t\t\t\t\t<div> Click the button to enable your device's webcam within the browser! </div>\n\t\t\t\t\t<br />\n\t\t\t      {this.state.webcamEnabled ? (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Webcam\n\t\t\t\t\t\t\t\t\taudio={false}\n\t\t\t\t\t        height={720}\n\t\t\t\t\t        ref={this.setRef}\n\t\t\t\t\t        screenshotFormat=\"image/jpeg\"\n\t\t\t\t\t        width={1280}\n\t\t\t\t\t\t\t\t\tmirrored=\"true\"\n\t\t\t\t\t\t\t\t\tvideoConstraints={videoConstraints}\n\t\t\t\t\t\t\t\t />\n\t\t\t\t\t\t\t\t <button className=\"has-text-centered button is-small is-rounded is-warning\" type=\"button\"onClick={()=> this.state.facingMode === \"user\" ? this.setState({ facingMode: \"environment\"}) : this.setState({facingMode: \"user\"})}>\n\t \t \t\t\t\t\t\tSwitch camera\n\t \t \t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<br />\n\t \t \t\t\t\t\t\t<button className=\"has-text-centered button is-small is-rounded is-link\" type=\"button\" onClick={this.capture}>\n\t \t \t\t\t\t\t\tTake a Screenshot!\n\t \t \t\t\t\t\t\t</button>\n\t\t \t\t\t\t\t\t{this.state.imageData ?\n\t\t \t\t\t\t\t\t\t<div>\n\t\t \t\t\t\t\t\t\t\t<p><img src={this.state.imageData} alt=\"\"/></p>\n\n\t\t \t\t\t\t\t\t\t</div>\n\t\t \t\t\t\t\t\t\t: null\n\t\t \t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<button className=\"button is-small is-rounded is-info\" type=\"button\" onClick={this.enableWebcam}>\n\t\t\t\t\t\t\tEnable Webcam\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<footer className=\"hero-foot\" style={{position: \"relative\", top: '70vh'}}>\n\t\t\t\t <div className=\"content has-text-centered\" style={{color: \"white\"}}>\n\t\t\t\t\tMade with <i className=\"fa fa-heart\" style={{color: \"rgb(235, 43, 86)\"}}></i> & <i className=\"fa fa-coffee\" style={{color: \"grey\"}}></i> in Orlando\n\t\t\t\t <div className=\" content has-text-centered\">\n\t\t\t\t\t <a href=\"https://bulma.io\">\n\t\t\t\t\t <img src=\"https://bulma.io/images/made-with-bulma--white.png\" alt=\"Made with Bulma\" width=\"128\" height=\"24\" />\n\t\t\t\t\t </a>\n\t\t\t\t </div>\n\t\t\t\t </div>\n\t\t\t\t</footer>\n\t    </div>\n\t  );\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}